alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
a ~ dnorm(0, 10),
b1 ~ dnorm(0, 10),
b2 ~ dnorm(0, 10),
sigma ~ dcauchy(0, 2)),
start = list(a = 0, b1 = 0, b2 = 0, sigma = 1),
data = d)
bm
bm =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
a ~ dnorm(0, 10),
b1 ~ dnorm(0, 10),
b2 ~ dnorm(0, 10),
sigma ~ dcauchy(0, 2)),
start = list(a = 0, b1 = 0, b2 = 0, sigma = 1),
data = d)
bm
bm =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
a ~ dnorm(0, 10),
b1 ~ dnorm(0, 10),
b2 ~ dnorm(0, 10),
sigma ~ dcauchy(0, 2)),
start = list(a = 0, b1 = 0, b2 = 0, sigma = 1),
data = d)
bm
bm1 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
a ~ dnorm(0, 10),
b1 ~ dnorm(0, 10),
b2 ~ dnorm(0, 10),
sigma ~ dcauchy(0, 2)),
start = list(a = 0, b1 = 0, b2 = 0, sigma = 1),
data = d1)
bm1
bm2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
a ~ dnorm(bm1@coef[[1]], diag(bm1@vcov)[[1]]^.5),
b1 ~ dnorm(bm1@coef[[2]], diag(bm1@vcov)[[2]]^.5),
b2 ~ dnorm(bm1@coef[[3]], diag(bm1@vcov)[[3]]^.5),
sigma ~ dcauchy(bm1@coef[[4]], diag(bm1@vcov)[[4]]^.5)
),
data = d2)
bm2
bm
bm1
bm
bm1 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
a ~ dnorm(0, 10),
b1 ~ dnorm(0, 10),
b2 ~ dnorm(0, 10),
sigma ~ dcauchy(0, 2)),
start = list(a = 0, b1 = 0, b2 = 0, sigma = 1),
data = d1)
bm1
bm2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~ bm1@coef, bm1@vcov)
),
data = d2)
bm2
?dmvnorm2
dmvnorm2( c(1,0) , Mu=c(0,0) , sigma=c(1,1) , Rho=diag(2) )
diag(2)
?dnrom
?dnorm
dnorm(0, 1)
dnorm(0, 10)
dnorm(0, 10)
dnorm(0, 10)
dnorm(0, 10)
bm1@vcov
di = diag(bm1@vcov)^.5
di
di^(-1) * bm1@vcov * di^(-1)
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1)
bm2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1)
),
data = d2)
)
bm1@coef
as.list(bm1@coef)
bm2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1))
start = as.list(bm1@coef)),
data = d2)
)
bm2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1)),
start = as.list(bm1@coef)),
data = d2)
)
bm2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1))
),
data = d2)
)
bm1@coef
diag(bm1@vcov)^.5
dnorm(0, 10)
dnorm(0,0, 10)
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1))
),
data = d2)
)
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1))
),
data = d2)
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
(bm1@vcov)^.5,
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1))
),
data = d2)
(bm1@vcov)^.5
diag(bm1@vcov)^.5
(diag(bm1@vcov)^.5)^(-1)
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1)
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1))
),
data = d2)
diag(bm1@vcov)^.5
di = diag(bm1@vcov)^.5
d1
head(d1)
lm(z ~ x, d)
library(biglm)
biglm(z ~ x, d)
blm = biglm(z ~ x, d)
summary(blm)
blm1 = biglm(z ~ x, d)
summary(blm1)
blm1 = biglm(z ~ x, d1)
summary(blm1)
blm2 = update(blm1, moredata = d2)
summary(blm2)
?update.biglm
data(trees)
ff<-log(Volume)~log(Girth)+log(Height)
chunk1<-trees[1:10,]
chunk2<-trees[11:20,]
chunk3<-trees[21:31,]
trees
a <- biglm(ff,chunk1)
a <- update(a,chunk2)
a <- update(a,chunk3)
summary(a)
summary(ff, trees)
summary(biglm(ff, trees))
d = data.frame(x = x, y = x + rnorm(n), z = x + runif(n, 0, 1))
change = sample(nrow(d), 5e3, prob = 1:nrow(d))
d$z[change] = d$z[change] - rnorm(length(change))
d1 = d[1:(.5*nrow(d)),]
d2 = d[(.5*nrow(d) + 1):nrow(d),]
b =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b * x,
a ~ dnorm(0, 10),
b ~ dnorm(0, 10),
sigma ~ dcauchy(0, 2)),
start = list(a = 0, b = 0, sigma = 1),
data = d)
b  # same same
bm =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
a ~ dnorm(0, 10),
b1 ~ dnorm(0, 10),
b2 ~ dnorm(0, 10),
sigma ~ dcauchy(0, 2)),
start = list(a = 0, b1 = 0, b2 = 0, sigma = 1),
data = d)
bm
b1 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b * x,
a ~ dnorm(0, 10),
b ~ dnorm(0, 10),
sigma ~ dcauchy(0, 2)),
start = list(a = 0, b = 0, sigma = 1),
data = d1)
b1
b2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b * x,
a ~ dnorm(b1@coef[[1]], diag(b1@vcov)[[1]]^.5),
b ~ dnorm(b1@coef[[2]], diag(b1@vcov)[[2]]^.5),
sigma ~ dnorm(b1@coef[[3]], diag(b1@vcov)[[3]]^.5)
),
data = d2)
b2#same same
b
b2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b * x,
a ~ dnorm(b1@coef[[1]], diag(b1@vcov)[[1]]^.5),
b ~ dnorm(b1@coef[[2]], diag(b1@vcov)[[2]]^.5),
sigma ~ dcauchy(b1@coef[[3]], diag(b1@vcov)[[3]]^.5)
),
data = d2)
b2#same same
b
blm = biglm(z ~ x, d)
summary(blm)
blm1 = biglm(z ~ x, d1)
summary(blm1)
blm2 = update(blm1, moredata = d2)
summary(blm2)
(diag(m@vcov)^.5)^(-1) * m@vcov * (diag(m@vcov)^.5)^(-1)
(diag(bm1@vcov)^.5)^(-1) * bm1@vcov * (diag(bm1@vcov)^.5)^(-1)
cov2cor(bm1@vcov)
?cov2cor
bm2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
cov2cor(bm1@vcov))
),
data = d2)
bm2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
cov2cor(bm1@vcov)),
start = list(bm1@coef)
),
data = d2)
list(bm1@coef)
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
cov2cor(bm1@vcov))
bm1
bm2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b1 * x + b2 * z,
c(a, b1, b2, sigma) ~
dmvnorm2(bm1@coef,
diag(bm1@vcov)^.5,
cov2cor(bm1@vcov)),
start = list(bm1@coef)
),
data = d2)
b1
b2 =
map(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b * x,
a ~ dnorm(b1@coef[[1]], diag(b1@vcov)[[1]]^.5),
b ~ dnorm(b1@coef[[2]], diag(b1@vcov)[[2]]^.5),
sigma ~ dcauchy(b1@coef[[3]], diag(b1@vcov)[[3]]^.5)
),
data = d2)
b2
b
coef(b)
(coef(b) - coef(b2)) / coef(b2)
readRDS('Dropbox/Coursework/9_Spring_15//STA242/stat242_2015/Assignment5/results/BayesianSimple.RDS')
library(shiny)
library(maps)
library(mapdata)
library(maptools)
source(file = "plot.R")
getwd()
setwd("Dropbox/Coursework/9_Spring_15/STA242/project/")
source(file = "plot.R")
source(file = "shinyApp/plot.R")
setwd("shinyApp/")
source(file = "plot.R")
source(file = "functions.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(Hmisc)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?reactive
runApp("shinyApp", display.mode = "showcase")
getwd()
setwd("..")
runApp("shinyApp", display.mode = "showcase")
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
latlong2county(
data.frame(x = input$plotclick$x, y = input$plotclick$y))
shiny::runApp('shinyApp')
?switch()
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
?pageWithSidebar
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
df$County
paste0(capitalize(theCounty(), " County")
)
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
is.character(NA)
is.character(NULL)
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
ls()
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
properCounty
input
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
?conditionalPanel
df$county
df$County
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
theCounty
theCounty()
names(output)
output$impl
sink()
output
output$theMap
options(shiny.error=browser)
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
options(shiny.error = NULL)
options(shiny.error = NULL)
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
shiny::runApp('shinyApp')
